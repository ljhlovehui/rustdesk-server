name: Build RustDesk Enterprise Server

on:
  push:
    branches: [ master, main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            artifact_name: rustdesk-enterprise-server-linux-x86_64
            cross: false
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            artifact_name: rustdesk-enterprise-server-linux-aarch64
            cross: true
          - os: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            artifact_name: rustdesk-enterprise-server-linux-armv7
            cross: true
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rustdesk-enterprise-server-windows-x86_64
            cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: rustdesk-enterprise-server-windows-i686
            cross: false
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rustdesk-enterprise-server-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rustdesk-enterprise-server-macos-aarch64
            cross: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libssl-dev \
          libsqlite3-dev \
          build-essential \
          cmake \
          git

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config openssl sqlite3

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows dependencies are handled by vcpkg
        echo "Windows dependencies managed by vcpkg"

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Setup enterprise build
      run: |
        cp Cargo_enterprise.toml Cargo.toml

    - name: Build with cross (cross-compilation)
      if: matrix.cross
      run: |
        cross build --release --target ${{ matrix.target }} --features enterprise

    - name: Build native
      if: '!matrix.cross'
      run: |
        cargo build --release --target ${{ matrix.target }} --features enterprise

    - name: Prepare artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/hbbs-enterprise artifacts/
        cp target/${{ matrix.target }}/release/hbbr-enterprise artifacts/
        cp target/${{ matrix.target }}/release/rustdesk-utils-enterprise artifacts/
        chmod +x artifacts/*
        
        # Create archive
        cd artifacts
        tar -czf ../${{ matrix.artifact_name }}.tar.gz *
        cd ..

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir artifacts
        copy "target\${{ matrix.target }}\release\hbbs-enterprise.exe" artifacts\
        copy "target\${{ matrix.target }}\release\hbbr-enterprise.exe" artifacts\
        copy "target\${{ matrix.target }}\release\rustdesk-utils-enterprise.exe" artifacts\
        
        # Create archive
        cd artifacts
        7z a ..\${{ matrix.artifact_name }}.zip *
        cd ..

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          rustdesk/rustdesk-enterprise-server
          ghcr.io/${{ github.repository }}-enterprise
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.enterprise
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        generate_release_notes: true
        body: |
          ## RustDesk Enterprise Server Release
          
          ### üöÄ Features
          - Complete user authentication and authorization system
          - Advanced file transfer with resume capability
          - Enterprise-grade security with 2FA and E2E encryption
          - Web-based management interface
          - Performance optimization and monitoring
          
          ### üì¶ Downloads
          Choose the appropriate binary for your platform:
          - **Linux x86_64**: `rustdesk-enterprise-server-linux-x86_64.tar.gz`
          - **Linux ARM64**: `rustdesk-enterprise-server-linux-aarch64.tar.gz`
          - **Windows x64**: `rustdesk-enterprise-server-windows-x86_64.zip`
          - **macOS Intel**: `rustdesk-enterprise-server-macos-x86_64.tar.gz`
          - **macOS Apple Silicon**: `rustdesk-enterprise-server-macos-aarch64.tar.gz`
          
          ### üê≥ Docker Images
          ```bash
          docker pull rustdesk/rustdesk-enterprise-server:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository }}-enterprise:${{ github.ref_name }}
          ```
          
          ### üìö Documentation
          - [Deployment Guide](DEPLOYMENT_GUIDE.md)
          - [User Guide](USER_GUIDE.md)
          - [Feature Comparison](FEATURE_COMPARISON.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev

    - name: Setup enterprise build
      run: |
        cp Cargo_enterprise.toml Cargo.toml

    - name: Run tests
      run: |
        cargo test --features enterprise

    - name: Run clippy
      run: |
        cargo clippy --features enterprise -- -D warnings

    - name: Check formatting
      run: |
        cargo fmt -- --check